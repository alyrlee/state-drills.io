{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/THINKFUL/Projects/react-playground/src/state-drills/Bomb.js\";\nimport React, { Component } from 'react'; // A component that uses life-cycles, setInterval and state to alternate between rendering either \"tick\" or \"tock\" for a time and then rendering \"BOOM!!!!\".\n// Make a component called Bomb inside the ./src/state-drills/ folder. Update your index.js to use the Bomb component to check that it works.\n// The component will have an initial state with a property count of 0.\n\nexport default class Bomb extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0\n    };\n  }\n\n  // The component should render a div element. Inside the div there should be a p that contains content of either \"tick\", \"tock\" or \"BOOM!!!!\".\n  // When the component mounts, register an interval that adds 1 to the count in state every second.\n  componentDidMount() {\n    this.interval = setInterval(() => {\n      this.setState({\n        count: this.state.count + 1\n      });\n    }, 1000);\n  } // When the component unmounts, clear the interval.\n\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  } // If the count goes equal to or above 8, display \"BOOM!!!!\".\n  // When the count goes above or equal to 8, also clear the interval!\n\n\n  renderDisplay() {\n    const {\n      count\n    } = this.state;\n\n    if (count >= 8) {\n      clearInterval(this.interval);\n      return 'BOOM!!!!'; // When the count is divisible by 2, display the word \"tick\".\n    } else if (count % 2 === 0) {\n      return 'tick'; // When the count isn't divisible by 2, display the word \"tock\".\n    } else {\n      return 'tock';\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"CountdownBomb\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }\n    }, this.renderDisplay());\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/THINKFUL/Projects/react-playground/src/state-drills/Bomb.js"],"names":["React","Component","Bomb","state","count","componentDidMount","interval","setInterval","setState","componentWillUnmount","clearInterval","renderDisplay","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CAEA;AAEA;AACA;;AAEA,eAAe,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAExCE,KAFwC,GAEhC;AACNC,MAAAA,KAAK,EAAC;AADA,KAFgC;AAAA;;AAM5C;AAIA;AAEAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,GAAgBC,WAAW,CAAC,MAAM;AAChC,WAAKC,QAAL,CAAc;AACZJ,QAAAA,KAAK,EAAE,KAAKD,KAAL,CAAWC,KAAX,GAAmB;AADd,OAAd;AAGD,KAJ0B,EAIxB,IAJwB,CAA3B;AAKD,GAlB2C,CAoB5C;;;AAEAK,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,aAAa,CAAC,KAAKJ,QAAN,CAAb;AACD,GAxB2C,CA4B5C;AACA;;;AAEAK,EAAAA,aAAa,GAAG;AACd,UAAM;AAAEP,MAAAA;AAAF,QAAY,KAAKD,KAAvB;;AACA,QAAIC,KAAK,IAAI,CAAb,EAAgB;AACdM,MAAAA,aAAa,CAAC,KAAKJ,QAAN,CAAb;AACA,aAAO,UAAP,CAFc,CAId;AAED,KAND,MAMO,IAAIF,KAAK,GAAG,CAAR,KAAc,CAAlB,EAAqB;AAC1B,aAAO,MAAP,CAD0B,CAG1B;AAED,KALM,MAKA;AACL,aAAO,MAAP;AACD;AACF;;AAIDQ,EAAAA,MAAM,GAAE;AACN,wBACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACK,KAAKD,aAAL,EADL,CADF;AAKD;;AAzD2C","sourcesContent":["import React, { Component } from 'react'\n\n// A component that uses life-cycles, setInterval and state to alternate between rendering either \"tick\" or \"tock\" for a time and then rendering \"BOOM!!!!\".\n\n// Make a component called Bomb inside the ./src/state-drills/ folder. Update your index.js to use the Bomb component to check that it works.\n// The component will have an initial state with a property count of 0.\n\nexport default class Bomb extends Component {\n    \n    state = {\n      count:0,\n    };\n\n// The component should render a div element. Inside the div there should be a p that contains content of either \"tick\", \"tock\" or \"BOOM!!!!\".\n\n\n\n// When the component mounts, register an interval that adds 1 to the count in state every second.\n\ncomponentDidMount() {\n  this.interval = setInterval(() => {\n    this.setState({\n      count: this.state.count + 1\n    })\n  }, 1000)\n}\n\n// When the component unmounts, clear the interval.\n\ncomponentWillUnmount() {\n  clearInterval(this.interval)\n}\n\n\n\n// If the count goes equal to or above 8, display \"BOOM!!!!\".\n// When the count goes above or equal to 8, also clear the interval!\n\nrenderDisplay() {\n  const { count } = this.state\n  if (count >= 8) {\n    clearInterval(this.interval)\n    return 'BOOM!!!!'\n\n    // When the count is divisible by 2, display the word \"tick\".\n\n  } else if (count % 2 === 0) {\n    return 'tick'\n\n    // When the count isn't divisible by 2, display the word \"tock\".\n    \n  } else {\n    return 'tock'\n  }\n}\n\n\n\nrender(){\n  return(\n    <div className='CountdownBomb'>\n        {this.renderDisplay()}\n      </div>\n  ) \n}\n}\n"]},"metadata":{},"sourceType":"module"}