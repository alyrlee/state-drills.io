{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/THINKFUL/Projects/react-playground/src/state-drills/RouletteGun.js\";\n// Make a component called RouletteGun inside the ./src/state-drills/ folder. Update your index.js to use the RouletteGun component to check that it works.\n// The component should render a div element.\n// Inside the div, there should be a p that contains the content of either:\n// spinning the chamber and pulling the trigger! ...\n// you're safe!\n// BANG!!!!\n// Inside the div, there should also be a button that contains Pull the trigger!.\n// The component will have an initial state with 2 properties, chamber that is initially set to null, and spinningTheChamber that is initially set to false.\n// The component will accept a prop called bulletInChamber that has a default value of 8.\nimport React, { Component } from 'react';\nexport default class RouletteGun extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chamber: null,\n      spinningTheChamber: false\n    };\n\n    this.handleClick = () => {\n      this.setState({\n        // The state should update spinningTheChamber to be true.\n        spinningTheChamber: true\n      });\n    };\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.timeout);\n  } //on click event handler\n\n\n  // A timeout should be registered for 2 seconds.\n  // Within the timeout, a random number between 1 and 8 should be generated.\n  // Within the timeout, the state should be updated so that the generated random number is the new value for chamber and spinningTheChamber should be false.\n  // The component should render the content of the p element according to the following rules:\n  // If spinningTheChamber is true, render spinning the chamber and pulling the trigger! ....\n  // If the chamber value in state is the same as the bulletInChamber value in props, render BANG!!!!.\n  // Otherwise, render you're safe!!\n  // If the component is to be unmounted, clear the timeout.\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"RouletteGun\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, this.renderDisplay()), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, \"Pull the trigger!\"));\n  }\n\n}\nRouletteGun.defaultProps = {\n  bulletInChamber: 8\n};","map":{"version":3,"sources":["/Users/mac/Desktop/THINKFUL/Projects/react-playground/src/state-drills/RouletteGun.js"],"names":["React","Component","RouletteGun","state","chamber","spinningTheChamber","handleClick","setState","componentWillUnmount","clearTimeout","timeout","render","renderDisplay","defaultProps","bulletInChamber"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,eAAe,MAAMC,WAAN,SAA0BD,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAK/CE,KAL+C,GAKvC;AACNC,MAAAA,OAAO,EAAE,IADH;AAENC,MAAAA,kBAAkB,EAAE;AAFd,KALuC;;AAAA,SAiB/CC,WAjB+C,GAiBjC,MAAM;AAClB,WAAKC,QAAL,CAAc;AACpB;AACIF,QAAAA,kBAAkB,EAAE;AAFJ,OAAd;AAID,KAtB8C;AAAA;;AAU/CG,EAAAA,oBAAoB,GAAG;AACrBC,IAAAA,YAAY,CAAC,KAAKC,OAAN,CAAZ;AACD,GAZ8C,CAe/C;;;AASJ;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACMC,EAAAA,MAAM,GAAG;AACX,wBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,KAAKC,aAAL,EAAJ,CADF,eAEE;AAAQ,MAAA,OAAO,EAAE,KAAKN,WAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFF,CADF;AAQD;;AA7CgD;AAA9BJ,W,CACVW,Y,GAAe;AACpBC,EAAAA,eAAe,EAAE;AADG,C","sourcesContent":["// Make a component called RouletteGun inside the ./src/state-drills/ folder. Update your index.js to use the RouletteGun component to check that it works.\n// The component should render a div element.\n// Inside the div, there should be a p that contains the content of either:\n// spinning the chamber and pulling the trigger! ...\n// you're safe!\n// BANG!!!!\n// Inside the div, there should also be a button that contains Pull the trigger!.\n// The component will have an initial state with 2 properties, chamber that is initially set to null, and spinningTheChamber that is initially set to false.\n// The component will accept a prop called bulletInChamber that has a default value of 8.\n\n\nimport React, { Component } from 'react'\n\nexport default class RouletteGun extends Component {\n    static defaultProps = {\n      bulletInChamber: 8\n    };\n  \n    state = {\n      chamber: null,\n      spinningTheChamber: false,\n    };\n\n    componentWillUnmount() {\n      clearTimeout(this.timeout)\n    }  \n\n    \n    //on click event handler\n  \n    handleClick = () => {\n      this.setState({\n// The state should update spinningTheChamber to be true.\n    spinningTheChamber: true,\n      })\n    }     \n\n// A timeout should be registered for 2 seconds.\n\n\n// Within the timeout, a random number between 1 and 8 should be generated.\n// Within the timeout, the state should be updated so that the generated random number is the new value for chamber and spinningTheChamber should be false.\n// The component should render the content of the p element according to the following rules:\n// If spinningTheChamber is true, render spinning the chamber and pulling the trigger! ....\n// If the chamber value in state is the same as the bulletInChamber value in props, render BANG!!!!.\n// Otherwise, render you're safe!!\n\n\n// If the component is to be unmounted, clear the timeout.\n      render() {\n    return (\n      <div className='RouletteGun'>\n        <p>{this.renderDisplay()}</p>\n        <button onClick={this.handleClick}>\n          Pull the trigger!\n        </button>\n      </div>\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}